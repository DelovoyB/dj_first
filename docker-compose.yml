version: '3.9'

networks:
  backend:
    driver: bridge
  db:
    driver: bridge

services:
  postgres:
    image: postgres:16.4
    container_name: ev-postgres
    networks:
      - db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: home
      POSTGRES_USER: home
      POSTGRES_PASSWORD: home
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U home -d home"]
      interval: 7s
      timeout: 10s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7.4.0
    container_name: ev-redis
    networks:
      - backend
    volumes:
      - redis_data:/var/lib/redis/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 7s
      timeout: 10s
      retries: 5
      start_period: 10s

  web:
    build: .
    container_name: ev-django
    networks:
      - db
      - backend
    command: waitress-serve --host=0.0.0.0 --port=8000 dj.wsgi:application
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DEBUG: 'False'
      DATABASE_URL: postgres://home:home@postgres:5432/home
      REDIS_URL: redis://redis:6379/1
      CELERY_BROKER_URL: redis://redis:6379/2
      CELERY_RESULT_BACKEND: redis://redis:6379/3
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}

  celery:
    build: .
    container_name: ev-celery
    networks:
      - backend
    command: celery -A dj worker --loglevel=info
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DEBUG: 'False'
      DATABASE_URL: postgres://home:home@postgres:5432/home
      REDIS_URL: redis://redis:6379/1
      CELERY_BROKER_URL: redis://redis:6379/2
      CELERY_RESULT_BACKEND: redis://redis:6379/3
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}

volumes:
  postgres_data:
  redis_data: